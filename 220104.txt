spring.io





스프링이 각광받은 이유 두 가지
dependency injection : 엔터프라이즈 어플리케이션을 만들때
transaction management

원래는 Java SE + Java EE(유료) 였으나 EE의 역할을 Spring이 대신 한다. (EE+Spring의 형태도 있다)

Java SE : 일반적인 로컬 응용 프로그램, 
	개발을 위한 API, 파일 I/O, 콘솔 I/O, 윈도우 I/O, 네트워크 I/O, Thread
Java EE : 분산형, 기업형 응용 프로그램, 개발을 위한 API, 결합력을 낮추는 DI,
	DB Transaction 처리, 로그 처리 --> Spring이 대신한다.

-> 기업형 응용 프로그램을 보조하기 위한 쉬운 프레임워크





웹을 위한 스프링 프레임워크 모듈

웹개발에 필요한 세 가지(in Spring) : 
MVC (DI (느슨한 결합력과 인터페이스)), 트랜잭션 (AOP), 인증과 권한(Servlet Filter)




느슨한 결합력과 인터페이스

코드 수정을 없애고 DI를 위한 설정
UI -> Service -> Dao > DB
중간에 Dao가 달라지면 Service도 달라져야함 -> 결합력이 높다.

UI -> Service -> Dao(interface) -> Dao -> DB
-> 인터페이스를 사용함으로서 결합력이 낮아진다.
소스코드 수정 없이 하기 위해서 객체 생성과 조립을 위한 외부 설정 XML, Annotation




Spring의 가장 기본적인 능력 : 객체를 생성해주고 조립해주는 능력
(종속 객체를 생성 조립해주는 도구)
-> DI(Dependency Injection) 와 IoC container

DI -> 종속성(Dependency) 주입(Injection) (=부품 조립)
--------------------------------------
Composition has a (일체형)

class A
{
	private B b; 
// 클래스 A는 클래스 B를 사용하면서 객체화해서 사용하는데, "A가 B를 일체형으로 가졌다" 라고 함
// 또한 B를 A의 부품(종속성, 종속 객체)이라고 함
	
	public A(){
		b = new B();
	}
}
--------------------------------------
Association has a (조립형) -> 느슨한 결합 (기업형에서 더 선호됨)

class A
{
	private B b;
//외부에서 생성하고, 세팅만 하고 사용하는 방법
	public void setB(B b){
		this.b = b;
	}
}
-------------------------------------------
조립형의 장점 : 부품을 쉽게 바꿀 수 있다.
조립형의 단점 : 부품을 조립해야 하는 불편함
-----------------------------------------
-조립형 사용방법 1. setter 함수를 이용해서 조립- : Setter Injection
B b = new B(); //Dependency
A a = new A();

a.setB(b); //Injection
--------------------------------------------
-조립형 사용방법 2. 생성자를 통해서 조립- : Construction Injection
B b = new B();
A a = new A(b);

이 복잡한 조립을 해주는 도구????????? : "Spring"






IoC (Inversion Of Control : 역순) 컨테이너
-> Dependency를 담고있는 컨테이너로서, 작은 부분부터 조립되어 담는다.

